{"title":"Template.apex","githubRepo":"Click-to-Cloud/Template.apex","googleAnalytics":"","index":{"title":"Home","description":"Template.apex is a library to evaluate templates written in visualforce expression syntax.","content":" Easy Evaluation Template.apex evaluates templates written in visualforce expression syntax. Customization Template.apex is open to customization. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/template-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/template-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/template-apex/docs/search.html"},"R_Instance":{"children":{"conversion":{"title":"Conversion Methods","description":"Conversion methods of R","layout":"guide","icon":"cloud","weight":2,"content":" {$page.description} Conversion Methods | Type | Method | | ---- | ------ | | Object | toObject | | List&lt;Object&gt; | toList | | Set&lt;String&gt; | toSet | | Map&lt;String, Object&gt; | toMap | | SObject | toSObject | | List&lt;SObject&gt; | toSObjectList | | Map&lt;String, SObject&gt; | toSObjectMap | | Integer | toInteger | | List&lt;Integer&gt; | toIntegerList | | Map&lt;String, Integer&gt; | toIntegerMap | | Long | toLong | | List&lt;Long&gt; | toLongList | | Map&lt;String, Long&gt; | toLongMap | | Double | toDouble | | List&lt;Double&gt; | toDoubleList | | Map&lt;String, Double&gt; | toDoubleMap | | Decimal | toDecimal | | List&lt;Decimal&gt; | toDecimalList | | Map&lt;String, Decimal&gt; | toDecimalMap | | String | toString | | List&lt;String&gt; | toStringList | | Map&lt;String, String&gt; | toStringMap | | Boolean | toBoolean | | List&lt;Boolean&gt; | toBooleanList | | Map&lt;String, Boolean&gt; | toBooleanMap | | Date | toDate | | List&lt;Date&gt; | toDateList | | Map&lt;String, Date&gt; | toDateMap | | Time | toTime | | List&lt;Time&gt; | toTimeList | | Map&lt;String, Time&gt; | toTimeMap | | Datetime | toDatetime | | List&lt;Datetime&gt; | toDatetimeList | | Map&lt;String, Datetime&gt; | toDatetimeMap | | Func | toFunc | | List&lt;Func&gt; | toFuncList | | Map&lt;String, Func&gt; | toFuncMap | | Pair | toPair | | List&lt;Pair&gt; | toPairList | | Map&lt;String, Pair&gt; | toPairMap | Type Checking Methods | Type | Method | | ---- | ------ | | List&lt;Object&gt; | isList | | Set&lt;String&gt; | isSet | | Map&lt;String, Object&gt; | isMap | | String | isString | ","srcFilePath":"src/pages/docs/R_Instance/conversion.md","id":"conversion","location":"/docs/R_Instance/conversion.html","url":"/template-apex/docs/R_Instance/conversion.html"},"creation":{"title":"Creation Methods","description":"Creation methods of R","layout":"guide","icon":"cloud","weight":1,"content":" {$page.description} emptyList Factory function to create instance of R(empty list). R.emptyList().size().debug(); // 0 emptyMap Factory function to create instance of R(empty set). R.emptySet().size().debug(); // 0 emptySet Factory function to create instance of R(empty set). R.emptySet().size().debug(); // 0 emptyString Factory function to create instance of R(empty string). R.emptyString().size().debug(); // 0 of Factory function to create instance of R. R.of('message').size().debug(); // 7 range Factory function to create instance of R(list of decimals in range). R.range(1, 3).debug(); // (1, 2) with Factory function to create instance of R(List). R.with(1).size().debug(); // 1 R.with(1, 2).size().debug(); // 2 R.with(1, 2, 3).size().debug(); // 3 withObj Factory function to create instance of R(Map). R.withObj('name', 'test').size().debug(); // 1 ","srcFilePath":"src/pages/docs/R_Instance/creation.md","id":"creation","location":"/docs/R_Instance/creation.html","url":"/template-apex/docs/R_Instance/creation.html"},"methods":{"title":"Methods","description":"methods of R","layout":"guide","icon":"cloud","weight":3,"content":" {$page.description} adjust Update the element at index with the function. R.with(1, 2, 3).adjust(R.add.apply(1), 1).debug(); // (1, 3, 3) all Check if all elements match the predicate. R.with(1, 2, 3).all(R.equals.apply(1)).debug(); // false append Append the element to the elements. R.with(1, 2, 3).append(4).debug(); // (1, 2, 3, 4) assoc Associate the value to the key. R.withObj('name', 'value').assoc('name', 'newValue').debug(); // {name=newValue} capitalize Return a new string with the first letter in uppercase. R.of('cat').capitalize().debug(); // Cat clamp Return a value that is limited between the min and the max. R.of(4).clamp(1, 3).debug(); // 3 compact Remove null values from the elements. R.with('a', null, 0).compact().debug(); // (a, 0) concat Concatenate the other. R.with(1, 2, 3).concat(R.with(4, 5, 6)).debug(); contains Check if the target is contained. R.with(1, 2, 3).contains(2).debug(); // true containsBy Check if the target is contained by the predicate. R.with(1, 2, 3).containsBy(R.equals, 2).debug(); // true containsKey Check if the key is contained. R.withObj('name', 'test').containsKey('name').debug(); // true countBy Get a result of count mapped by the key. R.with(1, 2, 2).countBy(R.identity).debug(); debug Print debug information. R.with(1, 2).debug(); // (1, 2) defaultTo Get the default value. R.of(null).defaultTo(3).debug(); // 3 difference Do a difference with the other object. R.with(1, 2, 3).difference(R.with(2, 3, 4)).debug(); // (1) dissoc Remove the value mapped by the key. R.withObj('name', 'value').dissoc('name').debug(); // {} doClone Get a clone. R.with(1, 2, 3).doClone().debug(); // (1, 2, 3) doInsert Insert the element at the index. R.with(1, 2, 3).doInsert(1, 'x').debug(); // (1, x, 2, 3) doInsertAll Insert all the elements at the index. R.with(1, 2, 3).doInsertAll(1, R.with('x', 'y')).debug(); // (1, x, y, 2, 3) doJoin Join the elements with the separator. R.with(1, 2, 3).doJoin('-').debug(); // 1-2-3 doMap Map a function over the elements. R.with(1, 2, 3).doMap(R.add.apply(1)).debug(); // (2, 3, 4) doMerge Merge the source. R.withObj('name', 'test').doMerge(R.withObj('name', 'newTest')).debug(); // {name=newTest} doUpdate Update the element at the specified index. R.with(1, 2, 3).doUpdate(1, 3).debug(); // (1, 3, 3) drop Drop the first N elements. R.with(1, 2, 3).drop(2).debug(); // (3) dropRight Drop the first N elements from right. R.with(1, 2, 3).dropRight(2).debug(); // (1) dropRightWhile Drop from right until the predicate is not satisfied. R.with(1, 2, 3).dropRightWhile(R.equals.apply(1)).debug(); // (1, 2, 3) dropWhile Drop until the predicate is not satisfied. R.with(1, 2, 3).dropWhile(R.equals.apply(1)).debug(); // (2, 3) endsWith Check if the elements end with the value. R.of('abc').endsWith('bc').debug(); // true every Check if every element matches the predicate. R.with(1, 2, 3).every(R.equals.apply(1)).debug(); // false evolve Apply the function to the value mapped by the same key and calculate the evolved object. R.withObj('name', 'test').evolve(new Map{ 'name' = R.append.apply('more') }).debug(); // {name=testmore} filter Call the function to filter the elements of instance R. R.with(1, 2, 3).filter(R.equals.apply(2)).debug(); // (2) R.with(new Account(Description = 'desc'), new Account()).filter('Description').debug(); // (Account:{Description=desc}) R.with(new Account(Description = 'desc'), new Account()).filter('Description', 'desc').debug(); // (Account:{Description=desc}) R.with(new Account(Description = 'desc'), new Account()).filter(new Map{ 'Description' = 'desc' }).debug(); // (Account:{Description=desc}) find Find the first element that satisfies the predicate. R.with(1, 2, 3).find(R.equals.apply(2)).debug(); // 2 findIndex Find the index of the first element that matches the predicate. R.with(1, 2, 3).findIndex(R.equals.apply(2)).debug(); // 1 findLast Find the first element that satisfies the predicate from last. R.with(1, 2, 3).findLast(R.equals.apply(2)).debug(); // 2 findLastIndex Find the index of the first element that matches the predicate from last. R.with(1, 2, 3).findLastIndex(R.equals.apply(2)).debug(); // 1 first Get the first element. R.with(1, 2, 3).first().debug(); // 1 flatten Flatten the elements recursively. R.with(1, new List{ 2, new List{ 3 } }, 4).flatten().debug(); // (1, 2, 3, 4) forEach Call the function to each element of instance R. R.with(1, 2, 3).forEach(R.debug); // 1 // 2 // 3 fromPairs Convert from a list of pairs to a map. R.with(new R.Pair('name', 'test')).fromPairs().debug(); // {name=test} groupBy Get a result of count mapped by the key. R.with(1, 2, 2).countBy(R.identity).debug(); head Get the first element. R.with(1, 2, 3).head().debug(); // 1 indexBy Get object indexed by the key. R.with(1, 2, 2).indexBy(R.identity).debug(); indexOf Get the index of the target. R.with(1, 2, 3).indexOf(2).debug(); // 1 init Get the elements except the last. R.with(1, 2, 3).init().debug(); // (1, 2) intersection Do an intersection with the other object. R.with(1, 2, 3).intersection(R.with(2, 3, 4)).debug(); // (2, 3) invert Get an inverted map, values mapped by duplicate keys are put in a list. R.withObj('name', 'test').invert().debug(); invertObj Get an inverted map. R.withObj('name', 'test').invertObj().debug(); // {test=name} isEmpty Check if it is empty. R.with(1, 2, 3).isEmpty().debug(); // false keys Get the keys of the wrapped map. R.withObj('name', 'test').keys().debug(); // {name} last Get the last element. R.with(1, 2, 3).last().debug(); // 3 lastIndexOf Get the index of the target from the last. R.with(1, 2, 3).lastIndexOf(2).debug(); // 1 length Get the length, same as size(). R.with(1, 2, 3).length().debug(); // 3 match Get a list of matched groups after doing a regex match. R.of('abc').match('.(a).').debug(); // (abc, a) none Check if none of the elements matches the predicate. R.with(1, 2, 3).none(R.equals.apply(1)).debug(); // false nth Get the nth element. R.with(1, 2, 3).nth(1).debug(); // 2 omit Omit the values specified by the list of keys. R.of(new Account(FirstName='test', Description='desc')).omit(new List{ 'Description' }).debug(); // {FirstName=test} pad Pad the string to the length. R.of('cat').pad(5, '').debug(); // *cat padLeft Pad the string to the length from the left. R.of('cat').padLeft(5, '').debug(); // *cat padRight Pad the string to the length from the right. R.of('cat').padRight(5, '').debug(); // cat* partition Create a paritioned pair using the predicate. R.with(1, 2, 3).partition(R.equals.apply(1)).debug(); // Pair:[fst=(1), snd=(2, 3)] pick Pick the values specified by the list of keys. R.of(new Account(FirstName='test', Description='desc')).pick(new List{ 'Description' }).debug(); // {Description=desc} pluck Extract the field out of the object to a new list. R.with(new Account(Description='desc')).pluck('Description').debug(); // (desc) prepend Prepend the element to the elements. R.with(1, 2, 3).prepend(4).debug(); // (4, 1, 2, 3) project Project a list of objects using the list of fields. R.with(new Account(Description='desc', FirstName='test')).project(new List{ 'Description' }).debug(); // ({Description=desc}) reduce Reduce over the elements. R.with(1, 2, 3).reduce(R.add, 0).debug(); // 6 reject Reject the elements by checking with the predicate. R.with(new Account(Description = 'desc'), new Account()).reject((Func)R.complement.run(R.has.apply('Description'))).debug(); // (Account:{Description=desc}) R.with(new Account(Description = 'desc'), new Account()).reject('Description').debug(); // (Account:{}) R.with(new Account(Description = 'desc'), new Account()).reject('Description', 'desc').debug(); // (Account:{}) R.with(new Account(Description = 'desc'), new Account()).reject(new Map{ 'Description' = 'desc' }).debug(); // (Account:{}) remove Remove elements starting at the index and specified by the count. R.with(1, 2, 3).remove(1, 3).debug(); // (1) repeat Create a list of elements by repeating the element. R.of('a').repeat(3).debug(); // (a, a, a) replace Replace the string according to the pattern and replacement. R.of('I love cats').replace('cat', 'dog').debug(); // I love dogs replaceAll Replace all the strings according to the pattern and replacement. R.of('I love cats').replaceAll('cat', 'dog').debug(); // I love dogs reverse Reverse the elements. R.with(1, 2, 3).reverse().debug(); // (3, 2, 1) sample Get a random element. R.with(1, 2, 3).sample().debug(); // 3 sampleSize Get a list of random elements. R.with(1, 2, 3).sampleSize(2).debug(); // (3, 1) shuffle Create a shuffled list of elements. R.with(1, 2, 3).shuffle().debug(); // (3, 1, 2) size Get the size, same as length(). R.with(1, 2, 3).size().debug(); // 3 slice Get a slice of the elements. R.with(1, 2, 3).slice(1, 2).debug(); // (2) some Check if some elements match the predicate. R.with(1, 2, 3).some(R.equals.apply(1)).debug(); // true sortBy Sort the elements by the comparator. R.with(new Account(Description='abc'), new Account(Description='def')).sortBy((Func)R.descend.run(R.prop.apply('Description'))).debug(); // (Account:{Description=def}, Account:{Description=abc}) sortDefault Sort the elements by default. R.with(3, 2, 1).sortDefault().debug(); // (1, 2, 3) split Split the string by the separator. R.of('a/b/c').split('/').debug(); // (a, b, c) startsWith Check if the elements start with the value. R.with(1, 2, 3).startsWith(new List{ 1, 2 }).debug(); // true sum Get the sum. R.with(1, 2, 3).sum().debug(); // 6 tail Get the elements except the first. R.with(1, 2, 3).tail().debug(); // (2, 3) take Take the first N elements. R.with(1, 2, 3).take(2).debug(); // (1, 2) takeRight Take the first N elements from right. R.with(1, 2, 3).takeRight(2).debug(); // (2, 3) takeRightWhile Take elements from right until the predicate is not satisfied. R.with(1, 2, 3).takeRightWhile(R.equals.apply(1)).debug(); // () takeWhile Take elements until the predicate is not satisfied. R.with(1, 2, 3).takeWhile(R.equals.apply(1)).debug(); // (1) test Test the string according to the pattern. R.of('cat').test('.b.').debug(); // false toLower Convert the string to lowercase. R.of('Cat').toLower().debug(); // cat toPairs Convert a map to a list of pairs. R.withObj('name', 'test').toPairs().debug(); // (Pair:[fst=name, snd=test]) toUpper Convert the string to uppercase. R.of('cat').toUpper().debug(); // CAT transform Transform the wrapped value using the function. R.with(1, 2, 3).transform(R.size).debug(); // 3 trim Trim the string. R.of(' a ').trim().debug(); // a union Do a union with the other object. R.with(1, 2, 3).union(R.with(2, 3, 4)).debug(); // (1, 2, 3, 4) uniq Return unique elements. R.with(1, 2, 2).uniq().debug(); // (1, 2) unnest Flatten the elements by one level. R.with(1, new List{ 2, 3 }, 4).unnest().debug(); // (1, 2, 3, 4) values Get the values of the wrapped map. R.withObj('name', 'test').values().debug(); // (test) without Same as difference. R.with(1, 2, 3).without(R.with(2, 3, 4)).debug(); // (1) xor Do an xor with the other object. R.with(1, 2, 3).xor(R.with(2, 3, 4)).debug(); // (1, 4) zip Create a zipped list of pairs according to the mList. R.with('a', 'b').zip(new List{ 1, 2 }).debug(); // (Pair:[fst=1, snd=a], Pair:[fst=2, snd=b]) zipObj Create a zipped map according to the mList. R.with('a', 'b').zipObj(new List{ 1, 2 }).debug(); // {1=a, 2=b} ","srcFilePath":"src/pages/docs/R_Instance/methods.md","id":"methods","location":"/docs/R_Instance/methods.html","url":"/template-apex/docs/R_Instance/methods.html"}},"title":"R.Instance","description":"Instance of R","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} R Instance Method Reference Here is the reference of the methods from R instance. You can use them in the way below: R.of(new List{ 'a', 'b', 'c' }) .reverse() .join('-') .toString(); ","srcFilePath":"src/pages/docs/R_Instance/index.md","id":"R_Instance","location":"/docs/R_Instance/","url":"/template-apex/docs/R_Instance/","childIds":["creation","conversion","methods"]},"Syntax":{"title":"Syntax","description":"Syntax","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Unary Operators | Operator | Description | | -------- | ----------- | | - | Negate the number | | ! | Negate the boolean | Binary Operators | Operator | Description | | -------- | ----------- | | == | Equals | | = | Equals | | != | Not Equals | | | Not Equals | | < | Less than | | | Greater than | | = | Greater than or equal | | + | Add | | - | Minute | | * | Multiply | | / | Divide | | ^ | Power | | & | String concatenation | Logical Operators | Operator | Description | | -------- | ----------- | | && | Logical AND | | \\|\\| | Logical OR | Other Operators | Operator | Description | | -------- | ----------- | | ? : | If ... then ... else ... | | () | Grouping | Date/Time Functions | Function | Support | | -------- | ----------- | | ADDMONTHS | Yes | | DATE | Yes | | DATEVALUE | Yes | | DATETIMEVALUE | Yes | | DAY | Yes | | MONTH | Yes | | NOW | Yes | | TODAY | Yes | | WEEKDAY | Yes | | YEAR | Yes | Logical Functions | Function | Support | | -------- | ----------- | | AND | Yes | | BLANKVALUE | Yes | | CASE | Yes | | IF | Yes | | ISBLANK | Yes | | ISCLONE | No | | ISNEW | No | | ISNULL | Yes | | ISNUMBER | Yes | | NOT | Yes | | NULLVALUE | Yes | | OR | Yes | | PRIORVALUE | No | Math Functions | Function | Support | | -------- | ----------- | | ABS | Yes | | CEILING | Yes | | EXP | Yes | | FLOOR | Yes | | LN | Yes | | LOG | Yes | | MAX | Yes | | MCEILING | Yes | | MFLOOR | Yes | | MIN | Yes | | MOD | Yes | | ROUND | Yes | | SQRT | Yes | Text Functions | Function | Support | | -------- | ----------- | | BEGINS | Yes | | BR | Yes | | CASESAFEID | No | | CONTAINS | Yes | | FIND | Yes | | GETSESSIONID | Yes | | HTMLENCODE | Yes | | ISPICKVAL | No | | JSENCODE | Yes | | JSINHTMLENCODE | Yes | | LEFT | Yes | | LEN | Yes | | LOWER | Yes | | LPAD | Yes | | MID | Yes | | RIGHT | Yes | | RPAD | Yes | | SUBSTITUTE | Yes | | TEXT | Yes | | TRIM | Yes | | UPPER | Yes | | URLENCODE | Yes | | VALUE | Yes | Advanced Functions | Function | Support | | -------- | ----------- | | CURRENCYRATE | No | | GETRECORDIDS | No | | INCLUDE | No | | ISCHANGED | No | | JUNCTIONIDLIST | No | | LINKTO | No | | REGEX | Yes | | REQUIRESCRIPT | No | | URLFOR | No | | VLOOKUP | No | ","srcFilePath":"src/pages/docs/Syntax/index.md","id":"Syntax","location":"/docs/Syntax/","url":"/template-apex/docs/Syntax/"},"Template":{"title":"Template","description":"Template","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} Template A template is a string with interpolatable expressions in it. In Template.apex, we use visualforce expression syntax to evaluate the templates. Template t = new Template(); String output = t.evaluate('{! name }', new Map{ 'name' = 'wilson' }); ","srcFilePath":"src/pages/docs/Template/index.md","id":"Template","location":"/docs/Template/","url":"/template-apex/docs/Template/"}},"childIds":["Template","Syntax","R_Instance","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/template-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with Template.apex","url":"/template-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Template.apex has a dependency on R.apex and Script.apex. First, we will include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then, we will include Script.apex. Include Jsep.cls, and JsepTest.cls(optional) into your Org, and Script.apex is ready. Then, we will include Template.apex. Include Template.cls, and TemplateTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/template-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. Template.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/template-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Evaluate Templates","description":"Evaluate Templates","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} To evaluate a template written in visualforce expression syntax, what you need is only one line. String output = new Template().evaluate('Hi {! UPPER(acc.Name) }', new Map{ 'acc' = new Account(...) }; ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/template-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Customization","description":"Customization","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} You can create a Template with options to customize it. Template.Options opts = new Template.Options(); opts.expressionStart = '{{'; opts.expressionEnd = '}}'; Template t = new Template(opts); ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/template-apex/tutorials/getting_started/step_4.html"}},"childIds":["step_1","step_2","step_3","step_4"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/template-apex"}